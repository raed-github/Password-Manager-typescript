3. Password Manager: Build a script that securely stores and manages passwords for different online accounts. Users should be able to generate strong passwords, store them, and retrieve them when needed.

To create a full app with file names exposed on port 8081, you'll need to set up a server using a framework like Express.js. Here's an example of how you can modify the previous code to create a full app with file names exposed on port 8081:

First, install the required dependencies by running the following command in your project directory:

$ npm install express


Then, create a new file named `app.ts` with the following code:

typescript
import express, { Request, Response } from 'express';
import * as crypto from 'crypto';

interface Passwords {
  [account: string]: string;
}

class PasswordManager {
  private passwords: Passwords;

  constructor() {
    this.passwords = {};
  }

  private generatePassword(length: number = 12): string {
    const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+~`|}{[]:;?<>./-=';
    let password = '';
    for (let i = 0; i < length; i++) {
      password += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return password;
  }

  public storePassword(account: string, password: string): void {
    this.passwords[account] = crypto.createHash('sha256').update(password).digest('hex');
  }

  public retrievePassword(account: string): string {
    if (account in this.passwords) {
      return this.passwords[account];
    } else {
      throw new Error('Account not found.');
    }
  }
}

const app = express();
const passwordManager = new PasswordManager();

app.use(express.json());

app.get('/generate', (req: Request, res: Response) => {
  const length = parseInt(req.query.length as string, 10) || 12;
  const password = passwordManager.generatePassword(length);
  res.json({ password });
});

app.post('/store', (req: Request, res: Response) => {
  const { account, password } = req.body;
  passwordManager.storePassword(account, password);
  res.json({ message: 'Password stored successfully.' });
});

app.get('/retrieve/:account', (req: Request, res: Response) => {
  const account = req.params.account;
  try {
    const password = passwordManager.retrievePassword(account);
    res.json({ password });
  } catch (error) {
    res.status(404).json({ error: error.message });
  }
});

const port = 8081;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

Save this file and create another file named `index.html` with the following code:

html
<!DOCTYPE html>
<html>
<head>
  <title>Password Manager</title>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
</head>
<body>
  <h1>Password Manager</h1>

  <h2>Generate a Password</h2>
  <form id="generateForm">
    <label for="length">Length:</label>
    <input type="number" id="length" name="length" min="6" max="32" value="12" required>
    <button type="submit">Generate</button>
  </form>
  <p id="generatedPassword"></p>

  <h2>Store a Password</h2>
  <form id="storeForm">
    <label for="account">Account:</label>
    <input type="text" id="account" name="account" required>
    <label for="password">Password:</label>
    <input type="password" id="password" name="password" required>
    <button type="submit">Store</button>
  </form>
  <p id="storeMessage"></p>

  <h2>Retrieve a Password</h2>
  <form id="retrieveForm">
    <label for="retrieveAccount">Account:</label>
    <input type="text" id="retrieveAccount" name="retrieveAccount" required>
    <button type="submit">Retrieve</button>
  </form>
  <p id="retrievedPassword"></p>

  <script>
    const generateForm = document.getElementById('generateForm');
    const generatedPassword = document.getElementById('generatedPassword');
    const storeForm = document.getElementById('storeForm');
    const storeMessage = document.getElementById('storeMessage');
    const retrieveForm = document.getElementById('retrieveForm');
    const retrievedPassword = document.getElementById('retrievedPassword');

    generateForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const length = document.getElementById('length').value;
      axios.get(`/generate?length=${length}`)
        .then((response) => {
          generatedPassword.textContent = `Generated Password: ${response.data.password}`;
        })
        .catch((error) => {
          console.error(error);
        });
    });

    storeForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const account = document.getElementById('account').value;
      const password = document.getElementById('password').value;
      axios.post('/store', { account, password })
        .then((response) => {
          storeMessage.textContent = response.data.message;
        })
        .catch((error) => {
          console.error(error);
        });
    });

    retrieveForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const retrieveAccount = document.getElementById('retrieveAccount').value;
      axios.get(`/retrieve/${retrieveAccount}`)
        .then((response) => {
          retrievedPassword.textContent = `Retrieved Password: ${response.data.password}`;
        })
        .catch((error) => {
          retrievedPassword.textContent = `Error: ${error.response.data.error}`;
        });
    });
  </script>
</body>
</html>

Save this file as `index.html` in the same directory as `app.ts`.

Now, run the following command to compile the TypeScript code:

$ npx tsc app.ts --esModuleInterop --resolveJsonModule


Finally, start the app by running the following command:

$ node app.js


You can now access the password manager app in your web browser at `http://localhost:8081/index.html`. The app allows you to generate, store, and retrieve passwords using a user-friendly interface. The server-side code handles the logic and error handling, while the client-side code communicates with the server using Axios.